###############################################################################
# This file is part of openWNS (open Wireless Network Simulator)
# _____________________________________________________________________________
#
# Copyright (C) 2004-2007
# Chair of Communication Networks (ComNets)
# Kopernikusstr. 16, D-52074 Aachen, Germany
# phone: ++49-241-80-27910,
# fax: ++49-241-80-22242
# email: info@openwns.org
# www: http://www.openwns.org
# _____________________________________________________________________________
#
# openWNS is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License version 2 as published by the
# Free Software Foundation;
#
# openWNS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
import os
import platform
import sys

Import('commonEnvs', 'cleanEnv')

for flavour, env in commonEnvs.iteritems():

        # use ICECC if iceccd is running
        ps = os.popen("ps ax") # is there a python way to get the processes?
        iceccds = [p for p in ps if "iceccd" in p]
        ps.close()

        if len(iceccds) > 0:
                # use distribution's icecc
                env.Replace(ICECC='icecc')
                # have some default number of jobs to be run in parallel ...
                env.SetOption('num_jobs', 10)

        else:
                # ...using default compiler
                # run jobs in parallel depending on processor count
                env.SetOption('num_jobs', os.sysconf('SC_NPROCESSORS_ONLN') + 1)

        # ... do you need another compiler ...
        env.configureCompiler(cc='/usr/bin/gcc', cxx='/usr/bin/g++')

        # set all defines that have to be shared by all projects
        # if they are defined here all projects use the same defines which is a good idea
        # env.AppendUnique(CPPDEFINES={'xxx':'1'})

        # env.AppendUnique(CXXFLAGS=["-E"])

	# This enables compiling under CYGWIN.
	if platform.system().startswith("CYGWIN"):
		# there seems to be a problem with parallel compiling
		# under cygwin. therfore we limit the number of
		# parallel jobs to 1 :)
                env.SetOption('num_jobs', 1)

		# currently only static linking is supported
		if not env['LINK_STATIC']:
			raise Exception("\n\nUnder cygwin only './playground.py install --static' is supported.")

		# python lib can be found under /usr/lib/pythonx.y/config
		env.Append(LIBPATH = [os.path.join(os.sep, 'usr', 'lib'),
				      os.path.join(os.sep, 'usr', 'lib', 'python'+sys.version[:3], 'config')])

		# under cygwin the boost libs end with gcc-mt, we
		# remove all boost libs and add them below again
		for lib in env['LIBS']:
			if 'boost' in lib:
				env['LIBS'].remove(lib)

		# openWNS Application needs to link against all libs, that openWNS Library links against
		env.AppendUnique(LIBS = ['python'+sys.version[:3], 'dl', 'cppunit'])
		env.AppendUnique(LIBS = ['boost_program_options-gcc-mt', 'boost_signals-gcc-mt'])

envs = commonEnvs

Return('envs')
