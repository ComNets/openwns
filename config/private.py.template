###############################################################################
# This file is part of openWNS (open Wireless Network Simulator)
# _____________________________________________________________________________
#
# Copyright (C) 2004-2007
# Chair of Communication Networks (ComNets)
# Kopernikusstr. 16, D-52074 Aachen, Germany
# phone: ++49-241-80-27910,
# fax: ++49-241-80-22242
# email: info@openwns.org
# www: http://www.openwns.org
# _____________________________________________________________________________
#
# openWNS is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License version 2 as published by the
# Free Software Foundation;
#
# openWNS is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
import os

Import('commonEnvs', 'cleanEnv')

for flavour, env in commonEnvs.iteritems():

        # use ICECC if iceccd is running
        ps = os.popen("ps ax") # is there a python way to get the processes?
        iceccds = [p for p in ps if "iceccd" in p]
        ps.close()

        if len(iceccds) > 0:
                # use distribution's icecc
                env.Replace(ICECC='icecc')
                # have some default number of jobs to be run in parallel ...
                env.SetOption('num_jobs', 10)

        else:
                # ...using default compiler
                # run jobs in parallel depending on processor count
                env.SetOption('num_jobs', os.sysconf('SC_NPROCESSORS_ONLN') + 1)

        # ... do you need another compiler ...
        env.configureCompiler(cc='/usr/bin/gcc', cxx='/usr/bin/g++')

        # set all defines that have to be shared by all projects
        # if they are defined here all projects use the same defines which is a good idea
        # env.AppendUnique(CPPDEFINES={'xxx':'1'})

        # env.AppendUnique(CXXFLAGS=["-E"])

envs = commonEnvs

Return('envs')
